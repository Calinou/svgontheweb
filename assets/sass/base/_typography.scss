// Typography
// ---------------------------------------

// Setting root sizes and base styles.
html {
  -webkit-text-size-adjust: 100%;
  -ms-text-size-adjust: 100%;

  @include rootsize;
}

a {
  -webkit-transition: color .1s, background-color .1s;
  -moz-transition: color .1s, background-color .1s;
  -ms-transition: color .1s, background-color .1s;
  -o-transition: color .1s, background-color .1s;
  transition: color .1s, background-color .1s;

  color: $linkColour;
  text-decoration: none;

  &:hover, &:active, &:focus {
    color: $hoverColour;
    text-decoration: none;
  }
}

.typeset {

  p a, li a {
    background-image: -webkit-linear-gradient(top,rgba(0, 0, 0, 0) 50%,rgba(0, 0, 0, 0) 50%);
    background-image: -moz-linear-gradient(top,rgba(0, 0, 0, 0) 50%,rgba(0, 0, 0, 0) 50%);
    background-image: -o-linear-gradient(top,rgba(0, 0, 0, 0) 50%,rgba(0, 0, 0, 0) 50%);
    background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,rgba(0, 0, 0, 0) 50%);
    background-position: 0 93%;
    background-repeat: repeat-x;
    background-size: 100% 0.15rem;

    &:hover, &:active, &:focus {
      background-image: -webkit-linear-gradient(top,rgba(0, 0, 0, 0) 50%,$hoverColour 50%);
      background-image: -moz-linear-gradient(top,rgba(0, 0, 0, 0) 50%,$hoverColour 50%);
      background-image: -o-linear-gradient(top,rgba(0, 0, 0, 0) 50%,$hoverColour 50%);
      background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,$hoverColour 50%);
      text-shadow: 0.1rem 0 $backgroundColour,0.15rem 0 $backgroundColour,-0.1rem 0 $backgroundColour,-0.15rem 0 $backgroundColour;
    }
  }

  small {
    line-height: 1rem;
  }

  h1 + .caption, .alpha + .caption, h2 + .caption, .beta + .caption, h3 + .caption, .gamma + .caption {
    margin-top: -1rem;
  }

  .delta + .caption, .epsilon + .caption, .zeta + .caption {
    margin-top: 0rem;
  }

  hr {
    background-image: -webkit-gradient(linear,left top,left bottom,from(rgba(0, 0, 0, 0)),to($captionColour));
    background-image: -webkit-linear-gradient(top,rgba(0, 0, 0, 0) 50%,$captionColour 50%);
    background-image: linear-gradient(to bottom,rgba(0, 0, 0, 0) 50%,$captionColour 50%);
    background-position: 0 50%;
    background-repeat: repeat-x;
    background-size: 100% 0.15rem;
    border: 0;
    margin: 0;
    padding-bottom: 3rem;
    padding-top: 3rem;
  }

  code, pre {
    background-color: $codeBackgroundColour;
    font-family: unquote(map-get($monospacetype, font-family));
  }

  pre {
    display: block;
    margin-bottom: 2rem;
    padding: 1rem;
    white-space: pre;
    white-space: pre-wrap;
    word-break: break-all;
    word-wrap: break-word;
  }

  code {
    line-height: 1rem;

    @include fontsize(theta, all);
  }

  .upper {
    letter-spacing: 0.1rem;
    text-transform: uppercase;
  }

  .small-caps {
    -webkit-font-feature-settings: 'c2sc' 1, 'kern' 1;
    -moz-font-feature-settings: 'c2sc' 1, 'kern' 1;
    -ms-font-feature-settings: 'c2sc' 1, 'kern' 1;
    -o-font-feature-settings: 'c2sc' 1, 'kern' 1;
    font-feature-settings: 'c2sc' 1, 'kern' 1;
    letter-spacing: 0.05em;
    font-kerning: normal;
  }

  .lining-numerals {
    -webkit-font-feature-settings: 'lnum' 1, 'kern' 1;
    -moz-font-feature-settings: 'lnum' 1, 'kern' 1;
    -ms-font-feature-settings: 'lnum' 1, 'kern' 1;
    -o-font-feature-settings: 'lnum' 1, 'kern' 1;
    font-feature-settings: 'lnum' 1, 'kern' 1;
  }

  .oldstyle-numerals {
    -webkit-font-feature-settings: 'onum' 1, 'kern' 1;
    -moz-font-feature-settings: 'onum' 1, 'kern' 1;
    -ms-font-feature-settings: 'onum' 1, 'kern' 1;
    -o-font-feature-settings: 'onum' 1, 'kern' 1;
    font-feature-settings: 'onum' 1, 'kern' 1;
  }

  .highlight {
    background-color: #FFFA96;

    a {

      &:hover, &:active, &:focus {
        text-shadow: 0.1rem 0 #FFFA96,0.15rem 0 #FFFA96,-0.1rem 0 #FFFA96,-0.15rem 0 #FFFA96;
      }
    }
  }
}


html:not([lang="ru"]):not([lang="zh"]) {

  // Site-wide base styles.
  body {
    font-family: unquote(map-get($bodytype, font-family));
    font-style: normal;
    font-weight: map-get($bodytype, regular);
    line-height: 2rem;

    @include fontsize(zeta, all);
  }

  // Styles for typeset text.
  .typeset {

    // Paragraphs. OpenType ligatures and oldstyle figures enabled if available.
    p {
      -webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
      -moz-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
      -ms-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
      -o-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
      font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;

      @include baseline($fontsize: zeta, $font: $bodytype, $lineheight: 2, $below: 2, $breakpoint: all);
    }

    // Headings. OpenType ligatures, discretionary ligatures and lining figures enabled if available.
    h1, h2, h3, h4, h5, h6 {
      -webkit-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
      -moz-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
      -ms-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
      -o-font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;
      font-feature-settings: 'dlig' 1, 'liga' 1, 'lnum' 1, 'kern' 1;

      color: $headingColour;
      font-family: unquote(map-get($headingtype, font-family));
      font-style: normal;
      font-weight: map-get($headingtype, bold);
    }

    // Big heading
    .mega {
      @include sassline(mega, $headingtype, 4, 1, all);
    }

    // Heading level 1.
    h1, .alpha {
      @include sassline($fontsize: alpha, $font: $headingtype, $lineheight: 3, $below: 1, $breakpoint: all);
    }

    // Heading level 2.
    h2, .beta {
      @include sassline(beta, $headingtype, 3, 1, all);
    }

    // Heading level 3.
    h3, .gamma {
      @include sassline(gamma, $headingtype, 3, 1, all);
    }

    // Heading level 4.
    h4, .delta {
      @include sassline(delta, $headingtype, 2, 1, all);
    }

    // Heading level 5.
    h5, .epsilon {
      @include sassline(epsilon, $headingtype, 2, 0, all);
    }

    // Heading level 6.
    h6, .zeta {
      @include sassline(zeta, $headingtype, 2, 0, all);

      letter-spacing: 0.1em;
      text-transform: uppercase;
    }

    // Lists.
    ul, ol {
      @include baseline(zeta, $bodytype, 2, 2, all);

      li {
        -webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -moz-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -ms-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -o-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;

        margin-left: 2rem;

        @include breakpoint(break-1) {
          margin-left: 0;
        }
      }
    }

    // Bold.
    b, strong, .bold {
      font-weight: map-get($bodytype, bold);
    }

    // Italic.
    em, i, .italic {
      font-style: map-get($bodytype, italic);
    }

    // Caption and inline small text.
    small, .caption {
      font-family: unquote(map-get($headingtype, font-family));
      font-style: normal;
      font-weight: map-get($headingtype, regular);

      @include fontsize(theta, all);
    }

    .caption {
      color: $captionColour;

      @include baseline(theta, $headingtype, 2, 2, all);
    }

    // Quotes.
    blockquote {

      p {
        border-left: 0.15rem solid $linkColour;
        font-style: map-get($bodytype, italic);
        padding-left: 1rem;

        // Add spacing below blockquote paragraphs to align to baseline grid.
        $get-scale: map-get($modular-scale, scale-0);
        $get-size: map-get($get-scale, zeta);
        $rootsize: nth($sizes, 1);
        $baseline-shift: #{($get-size / 2 * ((2 * $rootsize / $get-size) - map-get($bodytype, cap-height))) / $rootsize + 0.00001};
        $baseline-push: #{3 - (($get-size * ((2 * $rootsize / $get-size) - map-get($bodytype, cap-height))) / $rootsize + 0.00001)};

        margin-bottom: #{$baseline-push}rem;
        padding-bottom: #{$baseline-shift}rem;

        @for $i from 2 through $breakpoints-limit {
          $get-scale: map-get($modular-scale, scale-#{$i - 1});
          $get-size: map-get($get-scale, zeta);
          $rootsize: nth($sizes, $i);
          $baseline-shift: #{($get-size / 2 * ((2 * $rootsize / $get-size) - map-get($bodytype, cap-height))) / $rootsize + 0.00001};
          $baseline-push: #{3 - (($get-size * ((2 * $rootsize / $get-size) - map-get($bodytype, cap-height))) / $rootsize + 0.00001)};

          @media screen and (min-width: nth($points, $i) / 16 * 1em ) {
            margin-bottom: #{$baseline-push}rem;
            padding-bottom: #{$baseline-shift}rem;
          }
        }
      }

      @include breakpoint(break-1) {
        margin-left: -1rem;
      }
    }

    // Tables.
    table {
      -webkit-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -moz-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -ms-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -o-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;

      font-family: unquote(map-get($headingtype, font-family));
      font-style: normal;
      font-weight: map-get($headingtype, regular);
      width: 100%;

      @include sassline(eta, $headingtype, 2, 2, all);

      thead {

        th {
          @include sassline(zeta, $headingtype, 2, 0, all);
          padding-bottom: 1px;
        }
      }

      th {
        font-weight: map-get($headingtype, bold);
      }
    }
  }
}


html[lang="zh"] {

  body {
    font-family: unquote(map-get($chinesetype, font-family));
    font-style: normal;
    font-weight: map-get($chinesetype, regular);
    line-height: 2rem;
    text-align: justify;

    @include fontsize(zeta, all);
  }

  .typeset {

    p {
      -webkit-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      -moz-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      -ms-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      -o-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;

      @include baseline($fontsize: zeta, $font: $chinesetype, $lineheight: 2, $below: 2, $breakpoint: all);
    }

    h1, h2, h3, h4, h5, h6 {
      -webkit-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      -moz-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      -ms-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      -o-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;

      color: $headingColour;
      font-family: unquote(map-get($chinesetype, font-family));
      font-style: normal;
      font-weight: map-get($chinesetype, bold);
    }

    .mega {
      @include sassline(mega, $chinesetype, 4, 1, all);
    }

    h1, .alpha {
      @include sassline($fontsize: alpha, $font: $chinesetype, $lineheight: 3, $below: 1, $breakpoint: all);
    }

    h2, .beta {
      @include sassline(beta, $chinesetype, 3, 1, all);
    }

    h3, .gamma {
      @include sassline(gamma, $chinesetype, 3, 1, all);
    }

    h4, .delta {
      @include sassline(delta, $chinesetype, 2, 1, all);
    }

    h5, .epsilon {
      @include sassline(epsilon, $chinesetype, 2, 0, all);
    }

    h6, .zeta {
      @include sassline(zeta, $chinesetype, 2, 0, all);
    }

    ul, ol {
      @include baseline(zeta, $chinesetype, 2, 2, all);

      li {
        -webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -moz-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -ms-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -o-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;

        margin-left: 2rem;

        @include breakpoint(break-1) {
          margin-left: 0;
        }
      }
    }

    b, strong, .bold {
      font-weight: map-get($chinesetype, bold);
    }

    em, i, .italic {
      font-style: map-get($chinesetype, italic);
    }

    small, .caption {
      font-family: unquote(map-get($chinesetype, font-family));
      font-style: normal;
      font-weight: map-get($chinesetype, regular);

      @include fontsize(theta, all);
    }

    .caption {
      color: $captionColour;

      @include baseline(theta, $chinesetype, 2, 2, all);
    }

    blockquote {

      p {
        border-left: 0.15rem solid $linkColour;
        font-style: map-get($chinesetype, italic);
        padding-left: 1rem;

        $get-scale: map-get($modular-scale, scale-0);
        $get-size: map-get($get-scale, zeta);
        $rootsize: nth($sizes, 1);
        $baseline-shift: #{($get-size / 2 * ((2 * $rootsize / $get-size) - map-get($chinesetype, cap-height))) / $rootsize + 0.00001};
        $baseline-push: #{3 - (($get-size * ((2 * $rootsize / $get-size) - map-get($chinesetype, cap-height))) / $rootsize + 0.00001)};

        margin-bottom: #{$baseline-push}rem;
        padding-bottom: #{$baseline-shift}rem;

        @for $i from 2 through $breakpoints-limit {
          $get-scale: map-get($modular-scale, scale-#{$i - 1});
          $get-size: map-get($get-scale, zeta);
          $rootsize: nth($sizes, $i);
          $baseline-shift: #{($get-size / 2 * ((2 * $rootsize / $get-size) - map-get($chinesetype, cap-height))) / $rootsize + 0.00001};
          $baseline-push: #{3 - (($get-size * ((2 * $rootsize / $get-size) - map-get($chinesetype, cap-height))) / $rootsize + 0.00001)};

          @media screen and (min-width: nth($points, $i) / 16 * 1em ) {
            margin-bottom: #{$baseline-push}rem;
            padding-bottom: #{$baseline-shift}rem;
          }
        }
      }

      @include breakpoint(break-1) {
        margin-left: -1rem;
      }
    }

    table {
      -webkit-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -moz-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -ms-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -o-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;

      font-family: unquote(map-get($chinesetype, font-family));
      font-style: normal;
      font-weight: map-get($chinesetype, regular);
      width: 100%;

      @include sassline(eta, $chinesetype, 2, 2, all);

      thead {

        th {
          @include sassline(zeta, $chinesetype, 2, 0, all);
          padding-bottom: 1px;
        }
      }

      th {
        font-weight: map-get($chinesetype, bold);
      }
    }
  }

  &.wf-loading {

    h1,h2,h3,h4,h5,h6,li,p {
      visibility: hidden;
    }
  }
}

html[lang="ru"] {

  body {
    font-family: unquote(map-get($russiantype, font-family));
    font-style: normal;
    font-weight: map-get($russiantype, regular);
    line-height: 2rem;

    @include fontsize(zeta, all);
  }

  .typeset {

    p {
      -webkit-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      -moz-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      -ms-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      -o-font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;
      font-feature-settings: 'kern' 1, 'lnum' 1, 'liga' 1;

      @include baseline($fontsize: zeta, $font: $russiantype, $lineheight: 2, $below: 2, $breakpoint: all);
    }

    h1, h2, h3, h4, h5, h6 {
      -webkit-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      -moz-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      -ms-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      -o-font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;
      font-feature-settings: 'liga' 1, 'lnum' 1, 'kern' 1;

      color: $headingColour;
      font-family: unquote(map-get($russiantype, font-family));
      font-style: normal;
      font-weight: map-get($russiantype, bold);
    }

    .mega {
      @include sassline(mega, $russiantype, 4, 1, all);
    }

    h1, .alpha {
      @include sassline($fontsize: alpha, $font: $russiantype, $lineheight: 3, $below: 1, $breakpoint: all);
    }

    h2, .beta {
      @include sassline(beta, $russiantype, 3, 1, all);
    }

    h3, .gamma {
      @include sassline(gamma, $russiantype, 3, 1, all);
    }

    h4, .delta {
      @include sassline(delta, $russiantype, 2, 1, all);
    }

    h5, .epsilon {
      @include sassline(epsilon, $russiantype, 2, 0, all);
    }

    h6, .zeta {
      @include sassline(zeta, $russiantype, 2, 0, all);
    }

    ul, ol {
      @include baseline(zeta, $russiantype, 2, 2, all);

      li {
        -webkit-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -moz-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -ms-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        -o-font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;
        font-feature-settings: 'kern' 1, 'onum' 1, 'liga' 1;

        margin-left: 2rem;

        @include breakpoint(break-1) {
          margin-left: 0;
        }
      }
    }

    b, strong, .bold {
      font-weight: map-get($russiantype, bold);
    }

    em, i, .italic {
      font-style: map-get($russiantype, italic);
    }

    small, .caption {
      font-family: unquote(map-get($russiantype, font-family));
      font-style: normal;
      font-weight: map-get($russiantype, regular);

      @include fontsize(theta, all);
    }

    .caption {
      color: $captionColour;

      @include baseline(theta, $russiantype, 2, 2, all);
    }

    blockquote {

      p {
        border-left: 0.15rem solid $linkColour;
        font-style: map-get($russiantype, italic);
        padding-left: 1rem;

        $get-scale: map-get($modular-scale, scale-0);
        $get-size: map-get($get-scale, zeta);
        $rootsize: nth($sizes, 1);
        $baseline-shift: #{($get-size / 2 * ((2 * $rootsize / $get-size) - map-get($russiantype, cap-height))) / $rootsize + 0.00001};
        $baseline-push: #{3 - (($get-size * ((2 * $rootsize / $get-size) - map-get($russiantype, cap-height))) / $rootsize + 0.00001)};

        margin-bottom: #{$baseline-push}rem;
        padding-bottom: #{$baseline-shift}rem;

        @for $i from 2 through $breakpoints-limit {
          $get-scale: map-get($modular-scale, scale-#{$i - 1});
          $get-size: map-get($get-scale, zeta);
          $rootsize: nth($sizes, $i);
          $baseline-shift: #{($get-size / 2 * ((2 * $rootsize / $get-size) - map-get($russiantype, cap-height))) / $rootsize + 0.00001};
          $baseline-push: #{3 - (($get-size * ((2 * $rootsize / $get-size) - map-get($russiantype, cap-height))) / $rootsize + 0.00001)};

          @media screen and (min-width: nth($points, $i) / 16 * 1em ) {
            margin-bottom: #{$baseline-push}rem;
            padding-bottom: #{$baseline-shift}rem;
          }
        }
      }

      @include breakpoint(break-1) {
        margin-left: -1rem;
      }
    }

    table {
      -webkit-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -moz-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -ms-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      -o-font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;
      font-feature-settings: 'liga' 1, 'lnum' 1, 'tnum' 1, 'kern' 1;

      font-family: unquote(map-get($russiantype, font-family));
      font-style: normal;
      font-weight: map-get($russiantype, regular);
      width: 100%;

      @include sassline(eta, $russiantype, 2, 2, all);

      thead {

        th {
          @include sassline(zeta, $russiantype, 2, 0, all);
          padding-bottom: 1px;
        }
      }

      th {
        font-weight: map-get($russiantype, bold);
      }
    }
  }

  &.wf-loading {

    h1,h2,h3,h4,h5,h6,li,p {
      visibility: hidden;
    }
  }
}
